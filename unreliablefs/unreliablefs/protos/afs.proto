// Created on Feb 5.

syntax = "proto3";

package afs;

// Interface exported by the server.
service FileServer {

  rpc GetAttr(SimplePathRequest) returns (StatResponse) {}

  rpc ReadDir(SimplePathRequest) returns (ReadDirResponse) {}

  rpc Mkdir(SimplePathRequest) returns (BaseResponse) {}

  rpc Rmdir(SimplePathRequest) returns (BaseResponse) {}

  rpc Access(AccessPathRequest) returns (BaseResponse) {}

  // File operations

  rpc Open(OpenReq) returns (stream OpenResp) {}

  rpc PutFile(stream PutFileReq) returns (PutFileResp) {} 

  rpc Unlink(UnlinkReq) returns (UnlinkResp) {}
}

message OpenReq {
  string path = 1;
  int32 flag = 2;
  optional bool is_create = 3;
}

message OpenResp {
  int32  err = 1;
  bool file_exists = 2;
  bytes timestamp = 3; // save struct stat.st_mtim... Needed?
  bytes buf  = 4;
}

message SimplePathRequest {
  string path = 1;
}

message StatResponse {
  uint64     dev		    = 1;    /* ID of device containing file */
  uint64     ino		    = 2;    /* inode number */
  uint64     mode		    = 3;    /* protection */
  uint64     nlink 		  = 4;   	/* number of hard links */
  uint64     rdev		    = 6;    /* device ID (if special file) */
  uint64     size		    = 7;    /* total size, in bytes */
  uint64     blksize 		= 8; 	  /* blocksize for file system I/O */
  uint64     blocks 		= 9;  	/* number of 512B blocks allocated */
  uint64     atime 		  = 10;   /* time of last access */
  uint64     mtime		  = 11;   /* time of last modification */
  uint64     ctime		  = 12;   /* time of last status change */
  uint64     uid        = 13;
  uint64     gid        = 14;

  BaseResponse baseresponse = 15;
}

// TODO: make it streaming application.
message PutFileReq {
  string path = 1;

  // File content.
  bytes contents = 2;
}

message PutFileResp {
  int32 err = 1;
  uint64 lastModifiedTime = 2;   /* time of last modification */
}

message UnlinkReq {
  string path = 1;
}

message UnlinkResp {
  int32 err = 1;
}

message ReadDirResponse {
  repeated string dirName = 1;
  BaseResponse baseresponse = 2;
}

message AccessPathRequest {
  string path = 1;
  uint64 mode = 2;
}

message BaseResponse {
  int32 errorcode = 1;
  string errormessage = 2;
}

message Empty {
}
